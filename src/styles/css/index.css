@charset "UTF-8";
@import "../css/env.css";
@property --social-radius {
  inherits: true;
  initial-value: 0%;
  syntax: "<percentage>";
}
:root {
  color-scheme: light dark;
  --nav_height: 76px;
}
@media screen and (width <= 768px) {
  :root {
    --nav_height: 56px;
  }
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  overflow-x: clip;
  scrollbar-gutter: stable;
}
html::-webkit-scrollbar {
  background: transparent;
}
html::-webkit-scrollbar:vertical {
  width: 0.5rem;
}
html::-webkit-scrollbar:horizontal {
  height: 0.5rem;
}
html::-webkit-scrollbar-track {
  border-radius: 100vmax;
}
html::-webkit-scrollbar-thumb {
  background: hsl(0, 0%, 20%);
  border-radius: 100vmax;
}
@media (prefers-reduced-motion: no-preference) {
  html {
    scroll-behavior: smooth;
  }
}
html:has(dialog[open]) {
  overflow: hidden;
}

body {
  cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="12" fill="hsl(51 100% 53%)"/></svg>') 12 12, auto !important;
  min-block-size: 100svb;
}

dialog::-webkit-scrollbar {
  background: transparent;
}
dialog::-webkit-scrollbar:vertical {
  width: 0.5rem;
}
dialog::-webkit-scrollbar:horizontal {
  height: 0.5rem;
}
dialog::-webkit-scrollbar-track {
  border-radius: 100vmax;
}
dialog::-webkit-scrollbar-thumb {
  background: hsl(0, 0%, 20%);
  border-radius: 100vmax;
}

::selection {
  background-color: hsl(51, 100%, 53%);
  color: hsl(0, 0%, 0%);
}

strong {
  font-weight: 700;
}

@layer base, _components, _modules, _utils;
@layer base {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    paint-order: stroke fill;
  }
  address {
    font-style: normal;
  }
  textarea {
    font-family: inherit;
    font-size: medium;
    resize: vertical;
  }
  p {
    max-inline-size: 65ch;
  }
}
@layer _components {
  .alert-progress {
    animation: show-progress var(--alert_duration) linear forwards;
    scale: 0 1;
  }
  @keyframes show-progress {
    to {
      scale: 1 1;
    }
  }
  section:has(.content-fade-in) {
    view-timeline: --section-view block;
  }
  .content-fade-in {
    position: relative;
    transform-origin: var(--animation_trans-origin, left);
    z-index: 10;
  }
  .content-fade-in--bottom {
    --animation_trans-origin: center;
  }
  @supports (view-timeline-name: --foo) {
    .content-fade-in {
      opacity: var(--content_opacity, 0);
      animation: var(--content_animation, content-fade-in forwards);
      scale: var(--content_scale, 0.95);
      animation-range-end: 80svb;
      animation-range-start: entry;
      animation-timeline: --section-view;
      will-change: opacity, scale;
    }
  }
  @media (prefers-reduced-motion: reduce) {
    .content-fade-in {
      opacity: 1;
      animation: none;
      scale: 1;
    }
  }
  @keyframes content-fade-in {
    0%, 20% {
      opacity: 0;
      scale: 0.95;
    }
    50%, 100% {
      opacity: 1;
      scale: 1;
    }
  }
  @property --btn_gradient-length {
    inherits: false;
    initial-value: 0%;
    syntax: "<percentage>";
  }
  .btn {
    --btn-icon_color: var(--color-white);
    background-image: var(--btn_gradient, linear-gradient(160deg, light-dark(var(--color-black), var(--color-white)) var(--btn_gradient-length), light-dark(var(--color-white), var(--color-black)) var(--btn_gradient-length))) !important;
    text-align: center;
    transition: --btn_gradient-length 0.2s ease-in-out;
  }
  @media (hover: hover) {
    .btn:hover {
      --btn-before_trans-x: 0;
      --btn-after_trans-x: 0;
      --btn_gradient-length: 100%;
      --btn-icon_color: var(--color-black);
    }
    .btn:hover::after {
      --btn_gradient-length: 100%;
    }
  }
  .btn::after {
    content: attr(title);
    position: absolute;
    inset: 0;
    display: grid;
    place-items: center;
    padding: inherit;
    background-image: var(--btn-after_gradient, linear-gradient(160deg, light-dark(var(--color-white), var(--color-black)) var(--btn_gradient-length), light-dark(var(--color-black), var(--color-white)) var(--btn_gradient-length)));
    background-clip: text;
    line-height: inherit;
    transition: --btn_gradient-length 0.2s ease-in-out;
    -webkit-text-fill-color: transparent;
  }
  .btn[data-variant=secondary] {
    --btn-icon_color: light-dark(var(--color-white), var(--color-black));
    --btn_gradient: linear-gradient(
      160deg,
      light-dark(var(--color-white), var(--color-black)) var(--btn_gradient-length),
      light-dark(var(--color-black), var(--color-white)) var(--btn_gradient-length)
    );
    --btn-after_gradient: linear-gradient(
      160deg,
      light-dark(var(--color-black), var(--color-white)) var(--btn_gradient-length),
      light-dark(var(--color-white), var(--color-black)) var(--btn_gradient-length)
    );
  }
  @media (hover: hover) {
    .btn[data-variant=secondary]:hover {
      --btn-icon_color: light-dark(var(--color-black), var(--color-white));
    }
  }
  .btn > .icon {
    --icon_color: var(--btn-icon_color);
    transition: --icon_color 0.2s ease-in-out;
  }
  .btn:is([type=submit]) {
    border-color: var(--color-black) !important;
    --btn_gradient: linear-gradient(
      160deg,
      var(--color-white) var(--btn_gradient-length),
      var(--color-black) var(--btn_gradient-length)
    );
    --btn-after_gradient: linear-gradient(
      160deg,
      var(--color-black) var(--btn_gradient-length),
      var(--color-white) var(--btn_gradient-length)
    );
    --btn-icon_color: var(--color-white);
  }
  @media (hover: hover) {
    .btn:is([type=submit]):hover {
      --btn-icon_color: var(--color-black);
    }
  }
  .btn[data-variant=plain] {
    all: initial;
  }
  @media (hover: hover) {
    .card:hover {
      --card-before_trans-y: -100%;
      --card-after_trans-y: 0;
    }
  }
  .card h3 {
    position: relative;
    text-wrap: ballanced;
    white-space: pre-line;
    overflow: clip;
  }
  .card h3:before, .card h3:after {
    content: attr(title);
    position: absolute;
    inset: 0;
    display: block;
    padding: inherit !important;
    font: inherit;
    text-align: inherit;
    text-wrap: pretty;
    transition: translate 0.2s ease-in-out;
    z-index: 1;
  }
  @media screen and (width <= 768px) {
    .card h3:before, .card h3:after {
      display: none;
    }
  }
  @media (hover: none) {
    .card h3:before:hover, .card h3:after:hover {
      display: none;
    }
  }
  .card h3:before {
    background-color: light-dark(var(--color-white), var(--color-black));
    color: light-dark(var(--color-black), var(--color-white));
    translate: 0 var(--card-before_trans-y, 0);
    z-index: 1;
  }
  .card h3:after {
    background-color: light-dark(var(--color-yellow-500), var(--color-black));
    color: light-dark(var(--color-black), var(--color-yellow-500));
    translate: 0 var(--card-after_trans-y, 100%);
    z-index: 2;
  }
  .card ul li {
    list-style-type: disc;
  }
  .card ul li::marker {
    content: attr(data-marker);
  }
  .card p {
    text-wrap: ballanced;
    text-wrap: pretty;
  }
  .icon {
    display: block;
    aspect-ratio: 1;
    fill: var(--icon_color, currentColor);
  }
  .icon:not([class*=w-]) {
    inline-size: var(--icon_size, 2rem);
  }
  @property --me_filter-greyscale {
    inherits: false;
    initial-value: 25%;
    syntax: "<percentage>";
  }
  div:has(> .me) {
    align-self: end;
  }
  .me {
    filter: drop-shadow(0 0 1px light-dark(var(--color-black), var(--color-white))) drop-shadow(-1px -1px 1px light-dark(var(--color-black), var(--color-white))) drop-shadow(1px 1px 1px light-dark(var(--color-black), var(--color-white))) grayscale(var(--me_filter-greyscale)) contrast(1.15);
    translate: 0;
    transition: filter 0.2s ease-in-out;
    inline-size: min(768px, 70%);
  }
  @supports (view-timeline-name: --foo) {
    .me {
      animation: show-me forwards;
      translate: 0 30svb;
      animation-range-start: entry;
      animation-timeline: view();
      will-change: translate, filter;
    }
  }
  @media (prefers-reduced-motion: reduce) {
    .me {
      opacity: 1;
      animation: none;
      translate: 0 0;
      --me_filter-greyscale: 25%;
    }
  }
  @keyframes show-me {
    0%, 20% {
      --me_filter-greyscale: 100%;
      opacity: 0;
      translate: 0 30svb;
    }
    50%, 100% {
      --me_filter-greyscale: 25%;
      opacity: 1;
      translate: 0 2rem;
    }
  }
  :where(html, body):has(.nav--open) {
    overflow: hidden;
    overscroll-behavior: none;
    scrollbar-gutter: stable;
    touch-action: none;
  }
  .nav {
    max-inline-size: 100lvi;
    --nav-list_display: none;
  }
  @media screen and (width > 768px) {
    .nav {
      --nav-list_display: inline-flex;
      --nav-list_anim: shownav 0.5s ease-in-out forwards;
    }
  }
  .nav--open {
    position: fixed !important;
    inset: 0 0 auto !important;
    --nav-list_display: grid;
  }
  @media screen and (width > 768px) {
    .nav--open {
      --nav-list_display: inline-flex;
    }
  }
  .nav__list {
    display: var(--nav-list_display, inline-flex);
    animation: var(--nav-list_anim, none);
    translate: 0 0;
  }
  .nav__toggler {
    display: grid;
    place-items: center;
    aspect-ratio: 1;
    --after_scale-x: 0.75;
    --before_trans-x: -50%;
    --before_trans-y: calc(-50% - 0.5rem);
    --before_rotate: 0deg;
    --after_trans-x: -50%;
    --after_trans-y: calc(-50% + 0.5rem);
    --after_rotate: 0deg;
  }
  .nav__toggler--open {
    --before_trans-y: -50%;
    --before_rotate: -45deg;
    --after_scale-x: 1;
    --after_trans-y: -50%;
    --after_rotate: 45deg;
    --pseudo_trans-origin: center;
  }
  .nav__toggler::before, .nav__toggler::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    display: block;
    background-color: light-dark(var(--color-black), var(--color-white));
    transform-origin: var(--pseudo_trans-origin, right);
    transition: scale 0.2s ease-in-out, translate 0.2s ease-in-out, rotate 0.2s ease-in-out, transform-origin 0.2s ease-in-out;
    block-size: 2px;
    inline-size: 100%;
  }
  .nav__toggler::before {
    translate: var(--before_trans-x) var(--before_trans-y);
    rotate: var(--before_rotate);
  }
  .nav__toggler::after {
    translate: var(--after_trans-x) var(--after_trans-y);
    scale: var(--after_scale-x) 1;
    rotate: var(--after_rotate);
  }
  @keyframes showNav {
    0% {
      opacity: 0;
      translate: 0 -8svb;
    }
    100% {
      opacity: 1;
      translate: 0 0;
    }
  }
  @media (hover: hover) {
    .reference:hover {
      --ref-before_trans-y: -100%;
      --ref-after_trans-y: 0;
    }
  }
  .reference :where(span, small) {
    position: relative;
    overflow: clip;
  }
  .reference :where(span, small)::before, .reference :where(span, small)::after {
    content: attr(title);
    position: absolute;
    inset: 0;
    transition: translate 0.2s ease-in-out;
  }
  .reference :where(span, small)::before {
    color: light-dark(var(--color-black), var(--color-white));
    translate: 0 var(--ref-before_trans-y, 0);
  }
  .reference :where(span, small)::after {
    color: hsl(51, 100%, 53%);
    translate: 0 var(--ref-after_trans-y, 100%);
  }
  .reference > small::before {
    color: hsla(0, 0%, 0%, 0);
  }
  div:has(> .ref-list)::-webkit-scrollbar,
  .video-carousel::-webkit-scrollbar {
    background: transparent;
  }
  div:has(> .ref-list)::-webkit-scrollbar:vertical,
  .video-carousel::-webkit-scrollbar:vertical {
    width: 0.5rem;
  }
  div:has(> .ref-list)::-webkit-scrollbar:horizontal,
  .video-carousel::-webkit-scrollbar:horizontal {
    height: 0.5rem;
  }
  div:has(> .ref-list)::-webkit-scrollbar-track,
  .video-carousel::-webkit-scrollbar-track {
    border-radius: 100vmax;
  }
  div:has(> .ref-list)::-webkit-scrollbar-thumb,
  .video-carousel::-webkit-scrollbar-thumb {
    background: hsl(0, 0%, 20%);
    border-radius: 100vmax;
  }
  .ref-list > li {
    transition: opacity 0.2s ease-in-out;
  }
  .ref-list:hover > li:not(:hover) {
    opacity: 0.5;
  }
  .video-carousel {
    container-type: scroll-state;
    anchor-name: --video-carousel;
    scroll-snap-align: center;
  }
  .video-carousel::scroll-button(*) {
    position: absolute;
    display: block;
    background-color: hsla(0, 0%, 0%, 0.25);
    backdrop-filter: blur(0.5rem);
    border: none;
    border-radius: 100vmax;
    font-size: 2em;
    font-weight: bold;
    line-height: 1;
    color: white;
    scale: 1.1;
    transition: translate 0.25s ease-out, opacity 0.25s ease-out, scale 0.25s ease-out;
    z-index: 10;
    cursor: pointer;
    aspect-ratio: 1;
    inline-size: 2.5rem;
    position-anchor: --video-carousel;
    text-box: trim-both ex alphabetic;
  }
  .video-carousel::scroll-button(*):disabled {
    opacity: 0;
    translate: 0;
  }
  .video-carousel::scroll-button(left) {
    content: "‹";
    translate: calc(100% + 0.5rem) 0;
    position-area: center left;
  }
  .video-carousel::scroll-button(right) {
    content: "›";
    translate: calc(-100% - 0.5rem) 0;
    position-area: center right;
  }
  input[type=search]::-webkit-search-cancel-button {
    --cancel-btn_color: light-dark(hsl(from black h s l / var(--cancel-btn_opacity, 0.7)), hsl(from white h s l / var(--cancel-btn_opacity, 0.7))) ;
    -webkit-appearance: none;
    background-image: linear-gradient(45deg, transparent calc(50% - 1px), var(--cancel-btn_color) calc(50% - 1px), var(--cancel-btn_color) calc(50% + 1px), transparent calc(50% + 1px)), linear-gradient(-45deg, transparent calc(50% - 1px), var(--cancel-btn_color) calc(50% - 1px), var(--cancel-btn_color) calc(50% + 1px), transparent calc(50% + 1px));
    scale: var(--cancel-btn_scale, 1);
    transition: scale 0.25s ease-in-out;
    cursor: pointer;
    aspect-ratio: 1;
    inline-size: 0.85rem;
  }
  @media (hover: hover) {
    input[type=search]::-webkit-search-cancel-button:hover {
      --cancel-btn_opacity: 1;
      --cancel-btn_scale: 1.1;
    }
  }
  section {
    position: relative;
  }
  section h2 {
    color: hsl(0, 0%, 0%);
    animation-range: -8svb exit;
    paint-order: stroke fill;
    -webkit-text-stroke: 0.035em hsl(0, 0%, 100%);
  }
  section h2[data-dark] {
    -webkit-text-stroke: 0.035em hsl(0, 0%, 0%);
  }
  section#about-me {
    view-timeline: --about-view block;
    view-timeline-inset: 0 10svb;
  }
  .skills {
    max-width: 100svi;
    mask: linear-gradient(90deg, hsla(0, 0%, 0%, 0), hsl(0, 0%, 0%) 10%, hsl(0, 0%, 0%) 90%, hsla(0, 0%, 0%, 0));
  }
  .skills:hover li:not(:hover) {
    opacity: 0.5;
  }
  @media (prefers-reduced-motion: reduce) {
    .skills:hover li:not(:hover) {
      opacity: 1;
    }
  }
  .skills__scroller {
    animation: scroll-skills linear;
    animation-timeline: scroll(root);
  }
  @media screen and (width <= 768px) {
    .skills__scroller {
      animation-timeline: --about-view;
    }
  }
  .skills__scroller:nth-of-type(2) {
    animation-direction: reverse;
  }
  @media (prefers-reduced-motion: reduce) {
    .skills__scroller {
      animation: none;
    }
  }
  .skills li {
    display: inline-block;
    transition: opacity 0.2s ease-in-out;
  }
  @keyframes scroll-skills {
    to {
      translate: calc(-20% - 1rem) 0;
    }
  }
  .social {
    --social-radius: 0%;
    --social-opacity: 0;
    --button-scale: 1;
  }
  .social[data-open] {
    --social-radius: 200%;
    --social-opacity: 1;
    --button-scale: 1.1;
  }
  .social ul > li {
    position: absolute;
    top: 50%;
    left: 50%;
    opacity: var(--social-opacity);
    transform: translate(-50%, -50%);
    transition: transform 250ms cubic-bezier(0.34, 1.56, 0.64, 1), opacity 250ms cubic-bezier(0.34, 1.56, 0.64, 1);
    will-change: transform, opacity;
  }
  .social ul > li:nth-child(1) {
    transform: translate(calc(-50% + calc(-0.9396926208 * var(--social-radius))), calc(-50% + calc(0.3420201433 * var(--social-radius))));
    transition-delay: 0.05s;
  }
  .social ul > li:nth-child(2) {
    transform: translate(calc(-50% + calc(-0.9396926208 * var(--social-radius))), calc(-50% + calc(-0.3420201433 * var(--social-radius))));
    transition-delay: 0.1s;
  }
  .social ul > li:nth-child(3) {
    transform: translate(calc(-50% + calc(-0.5 * var(--social-radius))), calc(-50% + calc(-0.8660254038 * var(--social-radius))));
    transition-delay: 0.15s;
  }
  .social ul > li:nth-child(4) {
    transform: translate(calc(-50% + calc(0.1736481777 * var(--social-radius))), calc(-50% + calc(-0.984807753 * var(--social-radius))));
    transition-delay: 0.2s;
  }
}
@layer _modules {
  @media screen and (width <= 560px) {
    section:has(.blog) {
      padding-block-end: 0 !important;
    }
  }
  .blog {
    position: relative;
    margin-inline: auto;
    padding-block: clamp(0.5rem, 3svb, 2rem);
    font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    font-size: clamp(1rem, 2.5svi, 1.125rem);
    line-height: 1.7;
    color: light-dark(var(--color-gray-800), var(--color-gray-300));
    max-inline-size: 100svi;
  }
  @media screen and (width > 560px) {
    .blog {
      padding-inline: clamp(0.5rem, 3svi, 2rem);
    }
  }
  @media screen and (width <= 560px) {
    .blog {
      padding-block-end: 8svb;
    }
  }
  .blog:before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    display: block;
    background-color: inherit;
    translate: -50% -50%;
    z-index: -1;
    block-size: 100%;
    inline-size: 100%;
  }
  @media screen and (width <= 560px) {
    .blog:before {
      inline-size: 100svi;
    }
  }
  .blog__progress {
    position: fixed;
    inset: var(--nav_height) 0 auto;
    background-color: hsl(51, 100%, 53%);
    animation: article-progress forwards 1ms;
    scale: 0 1;
    transform-origin: left;
    z-index: 1000;
    animation-timeline: scroll(block);
    block-size: clamp(2px, 1svi, 0.25rem);
  }
  .blog__progress--fallback {
    animation: none;
    scale: none;
    transform: scaleX(0);
    will-change: transform;
  }
  .blog header {
    block-size: unset;
  }
  .blog > * + * {
    margin-top: clamp(1em, 3svi, 1.5em);
  }
  .blog header::before, .blog header::after {
    display: none !important;
  }
  .blog :is(h2, h3, h4, h5, h6) > :is(a) {
    display: contents;
    color: inherit !important;
    text-decoration: none;
  }
  .blog h1 {
    margin-bottom: clamp(0.5em, 1.5svi, 0.7em);
    font-size: clamp(2.5rem, 6svi, 3rem);
    line-height: 1.2;
  }
  @media screen and (width <= 768px) {
    .blog h1 {
      font-size: clamp(2rem, 5svi, 2.5rem);
      line-height: 1.3;
    }
  }
  @media screen and (width <= 560px) {
    .blog h1 {
      font-size: clamp(1.75rem, 4.5svi, 2rem);
      line-height: 1.4;
    }
  }
  .blog h1 small {
    display: block;
    margin-block-start: 0.5em;
    font-size: clamp(1rem, 0.5em, 2rem);
  }
  .blog h2 {
    display: flex;
    align-items: center;
    margin-top: clamp(1.8em, 5svi, 2.5em);
    margin-bottom: clamp(0.6em, 1.5svi, 0.8em);
    padding-inline-start: clamp(0.5rem, 2svi, 1rem);
    border-left: clamp(3px, 0.8svi, 4px) solid hsl(51, 100%, 53%);
    font-size: clamp(2rem, 5svi, 2.25rem);
    font-weight: 500;
    line-height: 1.3;
    color: light-dark(var(--color-gray-800), var(--color-gray-300));
    scroll-margin-block-start: calc(1rem + var(--nav_height));
    text-box: trim-both ex alphabetic;
  }
  @media screen and (width <= 768px) {
    .blog h2 {
      margin-top: clamp(1.5em, 4svi, 2em);
      font-size: clamp(1.75rem, 4.5svi, 2rem);
    }
  }
  @media screen and (width <= 560px) {
    .blog h2 {
      margin-top: clamp(1.2em, 3.5svi, 1.8em);
      font-size: clamp(1.5rem, 4svi, 1.75rem);
    }
  }
  .blog h2 > a:has(> span.icon.icon-link) {
    display: none;
  }
  .blog h3 {
    font-size: clamp(1.5rem, 4svi, 1.65rem);
  }
  @media screen and (width <= 560px) {
    .blog h3 {
      font-size: clamp(1.25rem, 3.5svi, 1.5rem);
    }
  }
  .blog h4 {
    font-size: clamp(1.5rem, 3.5svi, 1.5rem);
  }
  .blog h5 {
    font-size: clamp(1.25rem, 3svi, 1.25rem);
  }
  .blog h6 {
    font-size: clamp(1.125rem, 2.5svi, 1.125rem);
    text-transform: uppercase;
  }
  .blog p {
    margin-bottom: clamp(1em, 3svi, 1.5em);
    font-weight: 300;
    max-inline-size: none;
  }
  .blog p:last-child {
    margin-bottom: 0;
  }
  .blog .link,
  .blog a:not(.podcast-link) {
    color: hsl(51, 100%, 53%);
    text-decoration: none;
    transition: border-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
  .blog .link:hover, .blog .link:focus,
  .blog a:not(.podcast-link):hover,
  .blog a:not(.podcast-link):focus {
    color: hsl(51, 100%, 53%);
  }
  .blog ul,
  .blog ol {
    margin: clamp(1em, 3svi, 1.5em) 0;
    padding-left: clamp(1em, 3svi, 1.5em);
  }
  .blog ul li,
  .blog ol li {
    position: relative;
    margin-bottom: clamp(0.3em, 1svi, 0.5em);
  }
  .blog ul li::before,
  .blog ol li::before {
    position: absolute;
    left: -1.5em;
  }
  .blog ul {
    list-style: none;
  }
  .blog ul li::before {
    content: "•";
    display: inline-block;
    width: 1em;
    font-weight: bold;
    color: hsl(51, 100%, 53%);
  }
  .blog ol {
    list-style-type: decimal;
    counter-reset: item;
  }
  .blog ol li {
    counter-increment: item;
  }
  .blog pre {
    display: block;
    margin: clamp(1.5em, 4svi, 2em) 0;
    padding: clamp(1em, 3svi, 1.5em);
    background-color: light-dark(var(--color-gray-200), var(--color-gray-800));
    border-radius: clamp(3px, 0.8svi, 4px);
    font-family: "Fira Code", Consolas, monospace;
    font-size: clamp(0.85em, 2svi, 0.9em);
    line-height: 1.6;
    overflow: auto;
    overflow-x: auto;
    max-inline-size: 100%;
  }
  .blog code {
    padding: clamp(0.15em, 0.5svi, 0.2em) clamp(0.3em, 0.8svi, 0.4em);
    border-radius: clamp(2px, 0.6svi, 3px);
    font-family: "Fira Code", Consolas, monospace;
    font-size: clamp(0.85em, 2svi, 0.9em);
  }
  @keyframes article-progress {
    to {
      scale: 1 1;
    }
  }
  @media screen and (width <= 768px) {
    header {
      block-size: var(--header_height, calc(100svb - var(--nav_height)));
    }
  }
  @media screen and (width > 768px) {
    header {
      block-size: auto;
    }
  }
  header:empty {
    display: none;
  }
  @supports (view-timeline-name: --foo) {
    .intro {
      animation: header-content-fade-out forwards;
      animation-range-start: exit;
      animation-timeline: view();
      will-change: translate, opacity;
    }
  }
  @media (prefers-reduced-motion: reduce) {
    .intro {
      animation: none;
    }
  }
  .intro__title {
    position: relative;
    text-shadow: -2px 0 var(--color-pink), 2px 0 var(--color-torquoise);
    animation: show-title-glitch 0.5s ease-out 0.35s forwards;
  }
  @media (prefers-reduced-motion: reduce) {
    .intro__title {
      opacity: initial;
      text-shadow: none;
      animation: none;
      scale: initial;
    }
  }
  .intro__title:before, .intro__title:after {
    content: attr(data-glitch);
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: 100%;
    opacity: 0.8;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-align: inherit;
    white-space: pre-line;
    overflow: hidden;
    z-index: -1;
    clip: rect(0, attr(data-width px), attr(data-height px), 0);
    pointer-events: none;
    -webkit-text-stroke: 0;
  }
  @supports not (width: attr(data-width px)) {
    .intro__title:before, .intro__title:after {
      display: none;
    }
  }
  .intro__title::before {
    left: 2px;
    animation: noise-anim 2s infinite linear alternate-reverse;
  }
  .intro__title::after {
    left: -2px;
    animation: noise-anim-2 3s infinite linear alternate-reverse;
  }
  .intro__subtitle {
    opacity: 0;
    letter-spacing: 0.25em;
    animation: show-subtitle 0.5s ease-out 0.7s forwards;
    translate: 0 -25%;
  }
  @media (prefers-reduced-motion: reduce) {
    .intro__subtitle {
      opacity: initial;
      animation: none;
      translate: initial;
    }
  }
  .intro__btn {
    opacity: 0;
    animation: show-button 0.5s ease-out 0.7s forwards;
    translate: 0 50%;
  }
  @media (prefers-reduced-motion: reduce) {
    .intro__btn {
      opacity: initial;
      animation: none;
      translate: initial;
    }
  }
  @keyframes show-triangle {
    to {
      translate: 0 0;
    }
  }
  @keyframes triangle-exit {
    to {
      opacity: 1;
      scale: 2;
    }
  }
  @keyframes show-title {
    to {
      opacity: 1;
      scale: 1;
    }
  }
  @keyframes show-title-glitch {
    0% {
      opacity: 0;
      scale: 0.5;
    }
    60% {
      opacity: 0.8;
      scale: 1.1;
    }
    80% {
      opacity: 0.9;
      scale: 0.98;
    }
    100% {
      opacity: 1;
      scale: 1;
    }
  }
  @keyframes show-subtitle {
    to {
      opacity: 1;
      translate: 0 0;
    }
  }
  @keyframes show-button {
    to {
      opacity: 1;
      translate: 0 0;
    }
  }
  @keyframes header-content-fade-out {
    to {
      opacity: 0;
      translate: 0 -20svb;
      scale: 1.2;
    }
  }
  @keyframes glitch-color {
    0% {
      transform: translate(0);
    }
    20% {
      transform: translate(-3px, 3px);
    }
    40% {
      transform: translate(-3px, -3px);
    }
    60% {
      transform: translate(3px, 3px);
    }
    80% {
      transform: translate(3px, -3px);
    }
    to {
      transform: translate(0);
    }
  }
  @keyframes noise-anim {
    0% {
      clip: rect(calc(attr(data-height px) * 0), attr(data-width px), calc(attr(data-height px) * 0.2), 0);
    }
    5% {
      clip: rect(calc(attr(data-height px) * 0.3), attr(data-width px), calc(attr(data-height px) * 0.6), 0);
    }
    10% {
      clip: rect(calc(attr(data-height px) * 0.1), attr(data-width px), calc(attr(data-height px) * 0.4), 0);
    }
    15% {
      clip: rect(calc(attr(data-height px) * 0.5), attr(data-width px), calc(attr(data-height px) * 0.8), 0);
    }
    20% {
      clip: rect(calc(attr(data-height px) * 0.2), attr(data-width px), calc(attr(data-height px) * 0.7), 0);
    }
    25% {
      clip: rect(calc(attr(data-height px) * 0.4), attr(data-width px), calc(attr(data-height px) * 0.9), 0);
    }
    30% {
      clip: rect(calc(attr(data-height px) * 0.6), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    35% {
      clip: rect(calc(attr(data-height px) * 0.15), attr(data-width px), calc(attr(data-height px) * 0.55), 0);
    }
    40% {
      clip: rect(calc(attr(data-height px) * 0.35), attr(data-width px), calc(attr(data-height px) * 0.85), 0);
    }
    45% {
      clip: rect(calc(attr(data-height px) * 0.7), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    50% {
      clip: rect(calc(attr(data-height px) * 0), attr(data-width px), calc(attr(data-height px) * 0.3), 0);
    }
    55% {
      clip: rect(calc(attr(data-height px) * 0.45), attr(data-width px), calc(attr(data-height px) * 0.75), 0);
    }
    60% {
      clip: rect(calc(attr(data-height px) * 0.25), attr(data-width px), calc(attr(data-height px) * 0.65), 0);
    }
    65% {
      clip: rect(calc(attr(data-height px) * 0.55), attr(data-width px), calc(attr(data-height px) * 0.95), 0);
    }
    70% {
      clip: rect(calc(attr(data-height px) * 0.05), attr(data-width px), calc(attr(data-height px) * 0.45), 0);
    }
    75% {
      clip: rect(calc(attr(data-height px) * 0.75), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    80% {
      clip: rect(calc(attr(data-height px) * 0.3), attr(data-width px), calc(attr(data-height px) * 0.8), 0);
    }
    85% {
      clip: rect(calc(attr(data-height px) * 0.1), attr(data-width px), calc(attr(data-height px) * 0.6), 0);
    }
    90% {
      clip: rect(calc(attr(data-height px) * 0.65), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    95% {
      clip: rect(calc(attr(data-height px) * 0), attr(data-width px), calc(attr(data-height px) * 0.35), 0);
    }
    100% {
      clip: rect(calc(attr(data-height px) * 0.8), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
  }
  @keyframes noise-anim-2 {
    0% {
      clip: rect(calc(attr(data-height px) * 0.4), attr(data-width px), calc(attr(data-height px) * 0.9), 0);
    }
    5% {
      clip: rect(calc(attr(data-height px) * 0.1), attr(data-width px), calc(attr(data-height px) * 0.5), 0);
    }
    10% {
      clip: rect(calc(attr(data-height px) * 0.6), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    15% {
      clip: rect(calc(attr(data-height px) * 0.2), attr(data-width px), calc(attr(data-height px) * 0.7), 0);
    }
    20% {
      clip: rect(calc(attr(data-height px) * 0.8), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    25% {
      clip: rect(calc(attr(data-height px) * 0), attr(data-width px), calc(attr(data-height px) * 0.4), 0);
    }
    30% {
      clip: rect(calc(attr(data-height px) * 0.5), attr(data-width px), calc(attr(data-height px) * 0.85), 0);
    }
    35% {
      clip: rect(calc(attr(data-height px) * 0.15), attr(data-width px), calc(attr(data-height px) * 0.6), 0);
    }
    40% {
      clip: rect(calc(attr(data-height px) * 0.7), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    45% {
      clip: rect(calc(attr(data-height px) * 0.25), attr(data-width px), calc(attr(data-height px) * 0.75), 0);
    }
    50% {
      clip: rect(calc(attr(data-height px) * 0.45), attr(data-width px), calc(attr(data-height px) * 0.95), 0);
    }
    55% {
      clip: rect(calc(attr(data-height px) * 0.05), attr(data-width px), calc(attr(data-height px) * 0.55), 0);
    }
    60% {
      clip: rect(calc(attr(data-height px) * 0.65), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    65% {
      clip: rect(calc(attr(data-height px) * 0.3), attr(data-width px), calc(attr(data-height px) * 0.8), 0);
    }
    70% {
      clip: rect(calc(attr(data-height px) * 0), attr(data-width px), calc(attr(data-height px) * 0.35), 0);
    }
    75% {
      clip: rect(calc(attr(data-height px) * 0.55), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    80% {
      clip: rect(calc(attr(data-height px) * 0.35), attr(data-width px), calc(attr(data-height px) * 0.85), 0);
    }
    85% {
      clip: rect(calc(attr(data-height px) * 0.75), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    90% {
      clip: rect(calc(attr(data-height px) * 0.1), attr(data-width px), calc(attr(data-height px) * 0.6), 0);
    }
    95% {
      clip: rect(calc(attr(data-height px) * 0.9), attr(data-width px), calc(attr(data-height px) * 1), 0);
    }
    100% {
      clip: rect(calc(attr(data-height px) * 0), attr(data-width px), calc(attr(data-height px) * 0.3), 0);
    }
  }
  dialog::backdrop {
    background-color: var(--color-black-alpha-80);
    backdrop-filter: blur(0.5rem);
  }
  .services {
    --carousel-size: 100%;
    grid-template-columns: var(--col-template, 1fr 1fr 1fr);
    transition: all 0.2s;
    overflow: clip;
    container-size: size;
    scroll-behavior: smooth;
    scroll-marker-group: after;
  }
  @media screen and (width <= 1024px) {
    .services {
      /* Grid carousel with 16px side peeks and centered snapping */
      --col-template: none;
      display: grid !important;
      grid-auto-flow: column;
      /* Increase side peeks a bit (24px) */
      grid-auto-columns: calc(100% - 2 * 1.5rem);
      gap: 1rem; /* keep 16px gap between cards */
      /* no padding on wrapper per request */
      padding-inline: 0;
      overflow-x: auto;
      overscroll-behavior-x: contain;
      inline-size: 100%;
      max-inline-size: 100%;
      /* keep snap offset so first/last can center without visual padding */
      scroll-padding-inline: 1.5rem;
      scroll-snap-type: x mandatory;
      /* hide scrollbar across browsers */
      -ms-overflow-style: none; /* IE/Edge legacy */
      scrollbar-width: none; /* Firefox */
    }
    .services::-webkit-scrollbar { /* WebKit */
      display: none;
    }
  }
  .services::scroll-marker-group {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-block-start: 1rem;
    block-size: 1rem;
  }
  .services > div {
    container-type: scroll-state;
    scroll-snap-align: center;
    scroll-snap-stop: always;
  }
  @media screen and (width <= 1024px) {
    .services > div {
      container-type: scroll-state;
      /* Grid auto-columns control width; ensure no extra minimums */
      min-inline-size: 0;
      scroll-snap-align: center;
      scroll-snap-stop: always;
    }
  }
  .services > div::scroll-marker {
    content: "";
    display: block;
    box-sizing: border-box;
    background-color: var(--marker-bg, light-dark(var(--color-gray-800), var(--color-white)));
    border-radius: 100vmax;
    scale: 1;
    transition: background-color 0.2s ease-in-out, scale 0.2s ease-in-out;
    aspect-ratio: 1;
    inline-size: 1rem;
  }
  .services > div::scroll-marker:target-current {
    --marker-bg: var(--color-yellow-500);
    scale: 1.2;
  }
}
@layer _utils {
  .text-box-trim-both {
    text-box: trim-both ex alphabetic;
  }
}

/*# sourceMappingURL=index.css.map */
