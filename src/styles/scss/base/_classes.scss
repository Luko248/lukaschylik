@use '../abstracts/mixins/_index' as *;
@use '../abstracts/variables/_index' as *;

$alignTypes: ( 
    'sb': space-between, 
    'sa': space-around, 
    'c': center, 
    'fe': flex-end, 
    'fs': flex-start, 
    'st': stretch
);

$gapTypes: ( 
    '2': $gap-space-2, 
    '4': $gap-space-4, 
    '8': $gap-space-8, 
    '16': $gap-space-16, 
    '24': $gap-space-24, 
    '32': $gap-space-32, 
    '40': $gap-space-40,
    'no': 0
);

@mixin create-classes {
    // display
    .d {
        &-b {
            display: block;
        }

        &-ib {
            display: inline-block;
        }

        &-f {
            display: flex;
        }

        &-if {
            display: inline-flex;
        }

        &-g {
            display: grid;
        }

        &-ig {
            display: inline-grid;
        }

        &-c {
            display: contents;
        }

        &-n {
            display: none;
        }
    }
    // flex direction
    .fd {
        &-r {
            flex-direction: row;
        }

        &-c {
            flex-direction: column;
        }
    }
    //paddings
    .p {
        @each $type, $value in $gapTypes {
            &-#{$type} {
                @include padding-set-all($value);
            }

            &-#{$type}-x {
                @include padding-set-inline($value);
            }

            &-#{$type}-y {
                @include padding-set-block($value);
            }
        }
    }
    //margins
    .m {
        @each $type, $value in $gapTypes {
            &-#{$type} {
                @include margin-set-all($value);
            }

            &-#{$type}-x {
                @include margin-set-inline($value);
            }

            &-#{$type}-y {
                @include margin-set-block($value);
            }
        }

        &-la {
            margin-inline-start: auto;
        }

        &-ra {
            margin-inline-end: auto;
        }

        &-a {
            margin-inline: auto;
        }
    }
    //gaps
    .gap {
        gap: $gap-space-8 !important;

        @each $type, $value in $gapTypes {
            &-#{$type} {
                gap: #{$value} !important;
            }
        }
    }
    // justify content
    .jc {
        @each $type, $value in $alignTypes {
            &-#{$type} {
                justify-content: $value;
            }
        }
    }
    // align items
    .ai {
        @each $type, $value in $alignTypes {
            &-#{$type} {
                align-items: $value;
            }
        }
    }

    .text-truncate {
        @include text-truncate(100%);
    }

    .col-span {
        &-2 {
            @include grid-col-span;

            @include mq-responsive('desktop-s', max) {
                @include grid-col-span(1);
            }
        }

        &-3 {
            @include grid-col-span(3);

            @include mq-responsive('desktop-l', max) {
                @include grid-col-span(2);
            }

            @include mq-responsive('desktop-s', max) {
                @include grid-col-span(1);
            }
        }

        &-4 {
            @include grid-col-span(4);

            @include mq-responsive('desktop-l', max) {
                @include grid-col-span(2);
            }

            @include mq-responsive('desktop-s', max) {
                @include grid-col-span(1);
            }
        }

        &-5 {
            @include grid-col-span(5);

            @include mq-responsive('desktop-l', max) {
                @include grid-col-span(2);
            }

            @include mq-responsive('desktop-s', max) {
                @include grid-col-span(1);
            }
        }
    }

    .row-span {
        &-2 {
            @include grid-row-span;
        }

        &-3 {
            @include grid-row-span(3);
        }

        &-4 {
            @include grid-row-span(4);
        }
    }
}
